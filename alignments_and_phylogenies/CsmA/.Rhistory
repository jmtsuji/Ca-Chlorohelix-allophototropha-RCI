?sd
# Load libraries
library(here)
install.packages(c("here", "futile.logger"))
install.packages(c("glue", "plyr", "tibble", "dplyr", "ggplot2", "ggtree", "ape", "maps", "phytools", "reshape2", "gridExtra", "egg"))
# Load libraries
library(here)
library(futile.logger)
library(tools)
library(glue, warn.conflicts = FALSE)
library(plyr, warn.conflicts = FALSE)
library(tibble, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)
library(ggplot2, warn.conflicts = FALSE)
library(ggtree, quietly = TRUE, warn.conflicts = FALSE)
library(ape, warn.conflicts = FALSE)
library(maps, warn.conflicts = FALSE)
library(phytools, warn.conflicts = FALSE)
library(reshape2, warn.conflicts = FALSE)
library(gridExtra, warn.conflicts = FALSE)
library(egg, warn.conflicts = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
# Load libraries
library(here)
library(futile.logger)
library(tools)
library(glue, warn.conflicts = FALSE)
library(plyr, warn.conflicts = FALSE)
library(tibble, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)
library(ggplot2, warn.conflicts = FALSE)
library(ape, warn.conflicts = FALSE)
library(maps, warn.conflicts = FALSE)
library(phytools, warn.conflicts = FALSE)
library(reshape2, warn.conflicts = FALSE)
library(gridExtra, warn.conflicts = FALSE)
library(egg, warn.conflicts = FALSE)
library(ggtree, quietly = TRUE, warn.conflicts = FALSE)
################################
# User variables
fastani_data_filepath <- here::here("input_data", "Chlorobia_FastANI_results.txt")
phylogenetic_tree_filepath <- here::here("input_data", "chlorobia_riboprotein_phylogeny.treefile")
Chlorobia_naming_table_filepath <- here::here("input_data", "Chlorobia_naming_info.tsv")
output_pdf_filepath <- here::here("plot", "Chlorobia_ANI_raw.pdf")
bootstrap_cutoff <- 100
################################
# User variables
fastani_data_filepath <- here::here("input_data", "Chlorobia_FastANI_results.txt")
phylogenetic_tree_filepath <- here::here("input_data", "chlorobia_riboprotein_phylogeny.treefile")
Chlorobia_naming_table_filepath <- here::here("input_data", "Chlorobia_naming_info.tsv")
output_pdf_filepath <- here::here("plot", "Chlorobia_ANI_raw.pdf")
bootstrap_cutoff <- 50
tree_root <- "Ignavibacterium_album_JCM_16511_outgroup"
##### FUNCTIONS #####
# Function to choose an optimal colour scale to suit the number of entries being used
choose_discrete_colour_scale <- function(number_of_entries) {
# Choose the best colour scale based on the number of entries to be plotted
if ( number_of_entries == 2 ) {
colour_palette <- RColorBrewer::brewer.pal(n = 3, name = "Dark2")[c(1,2)]
} else if ( number_of_entries <= 8 ) {
colour_palette <- RColorBrewer::brewer.pal(n = number_of_entries, name = "Dark2")
} else if ( number_of_entries <= 12 ) {
colour_palette <- RColorBrewer::brewer.pal(n = number_of_entries, name = "Set3")
} else if ( number_of_entries > 12 ) {
colour_palette <- hue_pal(h = c(20,290))(number_of_entries)
} else {
flog.error(paste("Something is wrong with the number_of_entries ('", number_of_entries, "'). Is it non-numeric? Exiting...", sep = ""))
}
return(colour_palette)
}
# Function to read a tibble with some simple presets
read_tibble <- function(table_filepath, header = TRUE, sep = "\t", stringsAsFactors = FALSE, comment.char = "#") {
data_table <- read.table(table_filepath, header = header, sep = sep, stringsAsFactors = stringsAsFactors,
comment.char = comment.char) %>%
tibble::as_tibble()
return(data_table)
}
# Function to write a table with some simple presets
write_table <- function(x = table_data, file = table_filepath, sep = "\t", quote = FALSE, row.names = FALSE, col.names = TRUE) {
write.table(x = x, file = file, sep = sep, quote = quote, row.names = row.names, col.names = col.names)
}
# Load ANI table and add headers to ANI data based on tool manual
flog.info(glue::glue("Loading ANI table '", fastani_data_filepath, "'"))
ANI_data <- read_tibble(fastani_data_filepath, header = FALSE)
here
?here
here::here("test")
##### Load libraries ######
library(argparser)
library(parallel)
library(futile.logger)
library(roxygen2)
library(tools)
library(glue)
library(tibble)
library(plyr)
library(dplyr)
library(ggplot2)
library(reshape2)
library(scales)
.libPaths()
.libPaths()
install.packages("argparser", "futile.logger")
install.packages("plyr")
remove.packages("metannoviz")
devtools::install_github("metannotate/metannoviz@*release")
library(metannoviz)
?metannoviz
??metannoviz
?`metannoviz-package`
?metannoviz-package
?`metannoviz-package`
library(devtools)
devtools::install_github("metannotate/metannoviz@develop")
library(metannoviz)
?metannoviz
remove.packages("metannoviz")
devtools::install_github("metannotate/metannoviz@develop")
library(metannoviz)
?metannoviz
?.rs.restartR()
?rs.restartR()
.rs.restartR()
?metannoviz
setwd("D:/share/manuscripts/2020_04_14_Ca_Chx_allophototropha_paper/02_edits/05_github/Ca_Chlorohelix_allophototropha_RCI/alignments_and_phylogenies/CsmA/")
library(ape)
install.packages("ape")
?read.tree
??tree
library(ggtree)
??read.tre
ape::read.tree("CsmA_aligned_masked.treefile")
tree <- ape::read.tree("CsmA_aligned_masked.treefile")
?cophenetic.phylo
ape::cophenetic.phylo(tree)
library(dplyr)
library(tibble)
ape::cophenetic.phylo(tree) %>%
tibble::as_tibble()
?as_tibble
ape::cophenetic.phylo(tree) %>%
tibble::as_tibble(rownames = "genome")
tbl <- ape::cophenetic.phylo(tree) %>%
tibble::as_tibble(rownames = "genome")
View(tbl)
View(tbl)
write.table(tbl, "distances.tsv", sep = "\t", quote = FALSE, row.names = FALSE, col.names = TRUE)
